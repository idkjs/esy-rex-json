// Generated by Melange
'use strict';

var Json = require("../src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function go(ensure) {
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse("123"), {
            TAG: /* Number */1,
            _0: 123
          }), "parse number");
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse("[]"), {
            TAG: /* Array */2,
            _0: /* [] */0
          }), "empty array");
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse("[1,2,3,\n  ]"), {
            TAG: /* Array */2,
            _0: {
              hd: {
                TAG: /* Number */1,
                _0: 1
              },
              tl: {
                hd: {
                  TAG: /* Number */1,
                  _0: 2
                },
                tl: {
                  hd: {
                    TAG: /* Number */1,
                    _0: 3
                  },
                  tl: /* [] */0
                }
              }
            }
          }), "arr");
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse("\"awesome\\\"sauces\""), {
            TAG: /* String */0,
            _0: "awesome\"sauces"
          }), "str");
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse("{\"a\": 2, \"b\": \"3\"}"), {
            TAG: /* Object */3,
            _0: {
              hd: [
                "a",
                {
                  TAG: /* Number */1,
                  _0: 2
                }
              ],
              tl: {
                hd: [
                  "b",
                  {
                    TAG: /* String */0,
                    _0: "3"
                  }
                ],
                tl: /* [] */0
              }
            }
          }), "obj");
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse("{\"a\": 2, \"b\": [\"3\", []]}"), {
            TAG: /* Object */3,
            _0: {
              hd: [
                "a",
                {
                  TAG: /* Number */1,
                  _0: 2
                }
              ],
              tl: {
                hd: [
                  "b",
                  {
                    TAG: /* Array */2,
                    _0: {
                      hd: {
                        TAG: /* String */0,
                        _0: "3"
                      },
                      tl: {
                        hd: {
                          TAG: /* Array */2,
                          _0: /* [] */0
                        },
                        tl: /* [] */0
                      }
                    }
                  }
                ],
                tl: /* [] */0
              }
            }
          }), "obj");
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse("{\"a\": 2,// hello folks\n   \"b\": \"3\"}"), {
            TAG: /* Object */3,
            _0: {
              hd: [
                "a",
                {
                  TAG: /* Number */1,
                  _0: 2
                }
              ],
              tl: {
                hd: [
                  "b",
                  {
                    TAG: /* String */0,
                    _0: "3"
                  }
                ],
                tl: /* [] */0
              }
            }
          }), "obj");
  var bsconfig = "{\n    \"name\": \"rex-json\",\n    \"bsc-flags\": \"-w -27 -g\",\n    \"warnings\": {\n      \"number\": \"-40+6+7-26-27+32..39-28-44+45\", // aweomse\n      \"error\": \"+8\",\n    },\n    \"sources\": [ // stuff\n      \"./src\",\n      {\"dir\": \"test\", \"type\": \"dev\"}, ],\n    \"package-specs\": [\"commonjs\", \"es6\"], // here\n    \"entries\": [{\n      \"awesome\": true,\n      \"other\": false,\n      \"final\": null,\n      \"backend\": \"native\",\n      \"main-module\": \"Test\"\n    }],\n    \"refmt\": 3,\n  }\n  ";
  var optBind = function (fn, v) {
    if (v !== undefined) {
      return Curry._1(fn, Caml_option.valFromOption(v));
    }
    
  };
  var data = Json.parse(bsconfig);
  Curry._2(ensure, Caml_obj.caml_equal(Json.get("name", data), {
            TAG: /* String */0,
            _0: "rex-json"
          }), "parsed name");
  Curry._2(ensure, Caml_obj.caml_equal(optBind((function (param) {
                  return Json.get("error", param);
                }), Json.get("warnings", data)), {
            TAG: /* String */0,
            _0: "+8"
          }), "parsed deeper");
  Curry._2(ensure, Caml_obj.caml_equal(optBind((function (param) {
                  return Json.get("backend", param);
                }), optBind((function (param) {
                      return Json.nth(0, param);
                    }), Json.get("entries", data))), {
            TAG: /* String */0,
            _0: "native"
          }), "parsed quite deep");
  Curry._2(ensure, Caml_obj.caml_equal(Json.parse(Json.stringify(Json.parse(bsconfig))), Json.parse(bsconfig)), "parse + stringify + parse");
  var json = Json.parse("\n  {\n    \"some\": \"json\", // with a comment!\n    \"more\": [1,3,],\n    \"this\": {\n      \"object\": {\n        \"is\": {\n          \"really\": \"nested\"\n        }\n      }\n    },\n    \"nested\": [{\n      \"and\": [1,2,{\"stuff\": 5}]\n    }], // trailing commas!\n  }\n  ");
  var simple = Json.get("some", json);
  Curry._2(ensure, Caml_obj.caml_equal(simple, {
            TAG: /* String */0,
            _0: "json"
          }), "demo 1");
  var stuff = Json.bind(Json.bind(Json.bind(Json.bind(Json.get("nested", json), (function (param) {
                      return Json.nth(0, param);
                    })), (function (param) {
                  return Json.get("and", param);
                })), (function (param) {
              return Json.nth(2, param);
            })), (function (param) {
          return Json.get("stuff", param);
        }));
  Curry._2(ensure, Caml_obj.caml_equal(stuff, {
            TAG: /* Number */1,
            _0: 5
          }), "demo 2");
  var nestedObj = Json.getPath("this.object.is.really", json);
  Curry._2(ensure, Caml_obj.caml_equal(nestedObj, {
            TAG: /* String */0,
            _0: "nested"
          }), "demo 3");
  Curry._2(ensure, Json.getPath("this.does.not.exist", json) === undefined, "demo 4");
  Json.stringify(json);
  
}

exports.go = go;
/* Json Not a pure module */
