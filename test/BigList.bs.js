// Generated by Melange
'use strict';

var Json = require("../src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printexc = require("bs-platform/lib/js/printexc.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function go(ensure) {
  var canParse = function (string) {
    var val;
    try {
      val = Json.parse(string);
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      return Curry._2(ensure, false, "Was supposed to parse: " + (string + (" but failed with " + Printexc.to_string(e))));
    }
    return Curry._2(ensure, true, "");
  };
  var roundTrip = function (string) {
    var result;
    try {
      result = Json.parse(string);
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      return Curry._2(ensure, false, "Was supposed to parse: " + (string + (" but failed with " + Printexc.to_string(e))));
    }
    var str = Json.stringify(result);
    return Curry._2(ensure, str === string, "Roundtrip " + (str + (" from " + string)));
  };
  roundTrip("[\"new\\nline\"]");
  roundTrip("[\"new\\tline\"]");
  canParse("{\"\xcf\x80\":\"0\",}");
  canParse("{\"a\":\"b\"}/**/");
  canParse("{\"a\":\"b\"}//");
  canParse("[\"\",]");
  canParse("[1,]");
  canParse("{\"id\":0,}");
  canParse("{\"a\":/*comment*/\"b\"}");
  canParse("[[] ]");
  canParse("[\"\"]");
  canParse("[]");
  canParse("[\"a\"]");
  canParse("[false]");
  canParse("[null, 1, \"1\", {}]");
  canParse("[null]");
  canParse("[1 ]");
  canParse(" [1]");
  canParse("[1,null,null,null,2]");
  canParse("[2] ");
  canParse("[123e65]");
  canParse("[0e+1]");
  canParse("[0e1]");
  canParse("[ 4]");
  canParse("[-0.000000000000000000000000000000000000000000000000000000000000000000000000000001]");
  canParse("[20e1]");
  canParse("[-0]");
  canParse("[-123]");
  canParse("[-1]");
  canParse("[1E22]");
  canParse("[1E-2]");
  canParse("[1E+2]");
  canParse("[123e45]");
  canParse("[123.456e78]");
  canParse("[1e-2]");
  canParse("[1e+2]");
  canParse("[123]");
  canParse("[123.456789]");
  canParse("{\"asd\":\"sdf\", \"dfg\":\"fgh\"}");
  canParse("{\"asd\":\"sdf\"}");
  canParse("{\"a\":\"b\",\"a\":\"c\"}");
  canParse("{\"a\":\"b\",\"a\":\"b\"}");
  canParse("{}");
  canParse("{\"\":0}");
  canParse("{ \"min\": -1.0e+28, \"max\": 1.0e+28 }");
  canParse("{\"x\":[{\"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}], \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}");
  canParse("{\"a\":[]}");
  canParse("{ \"a\": \"b\" }");
  roundTrip("[\"\\\"\\\\/\\b\\f\\n\\r\\t\"]");
  canParse("[\"\\\"\"]");
  canParse("[\"a/*b*/c/*d//e\"]");
  canParse("[\"\\\\a\"]");
  canParse("[\"\\\\n\"]");
  canParse("[\"asd\"]");
  canParse("[ \"asd\"]");
  canParse("[\"\xef\xbf\xbd\"]");
  canParse("[\"\xf0\x9b\xbf\xbf\"]");
  canParse("[\"\xef\xbf\xbd\"]");
  canParse("[\"\xcf\x80\"]");
  canParse("[\"asd \"]");
  canParse("\" \"");
  canParse("[\"\xe2\x80\xa8\"]");
  canParse("[\"\xe2\x80\xa9\"]");
  canParse("[\"\xef\xbf\xbd\"]");
  canParse("[\"\xe2\x8d\x82\xe3\x88\xb4\xe2\x8d\x82\"]");
  canParse("[\"\xe2\x82\xac\xf0\x9d\x84\x9e\"]");
  canParse("[\"a\xef\xbf\xbda\"]");
  canParse("42");
  canParse("-0.1");
  canParse("\"asd\"");
  canParse("\"\"");
  canParse("[\"a\"]");
  canParse("[true]");
  canParse(" [] ");
  roundTrip("[1]");
  roundTrip("[1.1]");
  canParse("[-2.0]");
  roundTrip("123");
  roundTrip("-123");
  roundTrip("-1.23");
  roundTrip("-100.23");
  roundTrip("null");
  roundTrip("true");
  return roundTrip("false");
}

exports.go = go;
/* Json Not a pure module */
