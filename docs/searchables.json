[{"href": "./index.html", "title": "Home", "contents": "A simple cross-target JSON library for Reason/OCaml", "rendered": "A simple cross-target JSON library for Reason/OCaml", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let data = {|\n{\n  \"some\": \"json\", // with a comment!\n  \"more\": [1,3,],\n  /* also\n  multi-line comment */\n  \"this\": {\n    \"object\": {\n      \"is\": {\n        \"really\": \"nested\"\n      }\n    }\n  },\n  \"nested\": [{\n    \"and\": [1,2,{\"stuff\": 5}]\n  }], // trailing commas!\n}\n|};\nlet json = Json.parse(data);\nlet simple = Json.get(\"some\", json); /* == Some(String(\"json\")) */\n\nopen Json.Infix;\n\nlet stuff = json\n  |> Json.get(\"nested\")\n  |?> Json.nth(0)\n  |?> Json.get(\"and\")\n  |?> Json.nth(2)\n  |?> Json.get(\"stuff\")\n  |?> Json.number; /* == Some(5.) */\n\n/** Using a json path for nested objects */\nlet nestedString = json\n|> Json.getPath(\"this.object.is.really\")\n|?> Json.string; /* Some(\"nested\") */\n\nlet str = Json.stringify(json); /* back to a string */\nJs.log2(stuff, nestedString)", "rendered": "<pre><code>let data = {|\n{\n  \"some\": \"json\", // with a comment!\n  \"more\": [1,3,],\n  /* also\n  multi-line comment */\n  \"this\": {\n    \"object\": {\n      \"is\": {\n        \"really\": \"nested\"\n      }\n    }\n  },\n  \"nested\": [{\n    \"and\": [1,2,{\"stuff\": 5}]\n  }], // trailing commas!\n}\n|};\nlet json = Json.parse(data);\nlet simple = Json.get(\"some\", json); /* == Some(String(\"json\")) */\n\nopen Json.Infix;\n\nlet stuff = json\n  |> Json.get(\"nested\")\n  |?> Json.nth(0)\n  |?> Json.get(\"and\")\n  |?> Json.nth(2)\n  |?> Json.get(\"stuff\")\n  |?> Json.number; /* == Some(5.) */\n\n/** Using a json path for nested objects */\nlet nestedString = json\n|> Json.getPath(\"this.object.is.really\")\n|?> Json.string; /* Some(\"nested\") */\n\nlet str = Json.stringify(json); /* back to a string */\nJs.log2(stuff, nestedString)</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Usage-", "title": "Usage:", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Add rex-json to your package.json and your bsconfig.json.", "rendered": "Add <code>rex-json</code> to your <code>package.json</code> and your <code>bsconfig.json</code>.", "breadcrumb": "Home"},
{"href": "./index.html#Installation", "title": "Installation", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Why would you want this library?", "rendered": "Why would you want this library?", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Works with both native and js targets (compiled with bsb-native).", "rendered": "Works with both native and js targets (compiled with bsb-native).", "breadcrumb": "Home"},
{"href": "./index.html#Rex-Json", "title": "Rex Json", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/TestLib.html#value-go", "title": "go", "contents": "go unit bool string unit   unit  ", "rendered": "<h4 class='item'>let go = unit => ((bool, string) => unit, unit => 'a)</h4>", "breadcrumb": "TestLib"},
{"href": "./api/TestLib.html", "title": "TestLib", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TestLib"},
{"href": "./api/TestLib.html", "title": "TestLib", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TestLib"},
{"href": "./api/TestLib.html#TestLib", "title": "TestLib", "contents": "", "rendered": "", "breadcrumb": "TestLib"},
{"href": "./api/Test.html#value-str", "title": "str", "contents": "str string", "rendered": "<h4 class='item'>let str = string</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-nestedObj", "title": "nestedObj", "contents": "nestedObj option Json t", "rendered": "<h4 class='item'>let nestedObj = option(<a href=\"./api/Json.html\">Json</a>.<a href=\"./api/Json.html#type-t\">t</a>)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-stuff", "title": "stuff", "contents": "stuff option Json t", "rendered": "<h4 class='item'>let stuff = option(<a href=\"./api/Json.html\">Json</a>.<a href=\"./api/Json.html#type-t\">t</a>)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-|>>", "title": "|>>", "contents": " Yay get us a bind of optionals ", "rendered": " Yay get us a bind of optionals ", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-|>>", "title": "|>>", "contents": "|>> option option  option  ", "rendered": "<h4 class='item'>let |>> = (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-simple", "title": "simple", "contents": "simple option Json t", "rendered": "<h4 class='item'>let simple = option(<a href=\"./api/Json.html\">Json</a>.<a href=\"./api/Json.html#type-t\">t</a>)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-json", "title": "json", "contents": "json Json t", "rendered": "<h4 class='item'>let json = <a href=\"./api/Json.html\">Json</a>.<a href=\"./api/Json.html#type-t\">t</a></h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-data", "title": "data", "contents": "data string", "rendered": "<h4 class='item'>let data = string</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-optBind", "title": "optBind", "contents": "optBind option  option option  ", "rendered": "<h4 class='item'>let optBind = ('a => option('a), option('a)) => option('a)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-bsconfig", "title": "bsconfig", "contents": "bsconfig string", "rendered": "<h4 class='item'>let bsconfig = string</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html", "title": "Test", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Test"},
{"href": "./api/Test.html", "title": "Test", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Test"},
{"href": "./api/Test.html#Test", "title": "Test", "contents": "", "rendered": "", "breadcrumb": "Test"},
{"href": "./api/BigList.html#value-roundtrip", "title": "roundtrip", "contents": "roundtrip string unit ", "rendered": "<h4 class='item'>let roundtrip = string => unit</h4>", "breadcrumb": "BigList"},
{"href": "./api/BigList.html#value-invalid", "title": "invalid", "contents": "invalid string unit ", "rendered": "<h4 class='item'>let invalid = string => unit</h4>", "breadcrumb": "BigList"},
{"href": "./api/BigList.html#value-tryparse", "title": "tryparse", "contents": "tryparse string option Json t ", "rendered": "<h4 class='item'>let tryparse = string => option(<a href=\"./api/Json.html\">Json</a>.<a href=\"./api/Json.html#type-t\">t</a>)</h4>", "breadcrumb": "BigList"},
{"href": "./api/BigList.html", "title": "BigList", "contents": "@rest", "rendered": "@rest", "breadcrumb": "BigList"},
{"href": "./api/BigList.html", "title": "BigList", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "BigList"},
{"href": "./api/BigList.html#BigList", "title": "BigList", "contents": "", "rendered": "", "breadcrumb": "BigList"},
{"href": "./api/Json.html#value-parsePath", "title": "parsePath", "contents": "parsePath list string t t  ", "rendered": "<h4 class='item'>let parsePath = (list(string), <a href=\"./api/Json.html#type-t\">t</a>) => <a href=\"./api/Json.html#type-t\">t</a></h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-bind", "title": "bind", "contents": "bind option option  option  ", "rendered": "<h4 class='item'>let bind = (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-unwrap", "title": "unwrap", "contents": "unwrap string option  ", "rendered": "<h4 class='item'>let unwrap = (string, option('a)) => 'a</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-string_of_number", "title": "string_of_number", "contents": "string_of_number float string ", "rendered": "<h4 class='item'>let string_of_number = float => string</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix;\nlet inc = x => x + 1;\nlet x: int = fold(Some(4), 10, inc);\nlet y: int = fold(None, 2, inc);\nJs.log2(x, y);", "rendered": "<pre><code>open Json.Infix;\nlet inc = x => x + 1;\nlet x: int = fold(Some(4), 10, inc);\nlet y: int = fold(None, 2, inc);\nJs.log2(x, y);</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.fold", "title": "Infix.fold", "contents": "It&#39;s called fold because that&#39;s what people call it :?. It&#39;s the same as &quot;transform contents to new value&quot; + &quot;unwrap with default&quot;.", "rendered": "It&#39;s called fold because that&#39;s what people call it :?. It&#39;s the same as &quot;transform contents to new value&quot; + &quot;unwrap with default&quot;.", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.fold", "title": "Infix.fold", "contents": "&quot;handle the value if present, otherwise here&#39;s the default&quot;", "rendered": "&quot;handle the value if present, otherwise here&#39;s the default&quot;", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.fold", "title": "Infix.fold", "contents": "fold option    ", "rendered": "<h4 class='item'>let fold = (option('a), 'a, 'a => 'a) => 'a</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix;\nlet inc = x => x + 1;\nlet x: option(int) = Some(7) |?>> inc;\nlet y: option(int) = None |?>> inc;\nJs.log2(x, y);", "rendered": "<pre><code>open Json.Infix;\nlet inc = x => x + 1;\nlet x: option(int) = Some(7) |?>> inc;\nlet y: option(int) = None |?>> inc;\nJs.log2(x, y);</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|?>>", "title": "Infix.|?>>", "contents": "The &quot;transform contents into new value &amp; then re-wrap&quot; operator", "rendered": "The &quot;transform contents into new value &amp; then re-wrap&quot; operator", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|?>>", "title": "Infix.|?>>", "contents": "|?>> option  option  ", "rendered": "<h4 class='item'>let |?>> = (option('a), 'a => 'a) => option('a)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix;\nlet maybeInc = x => x > 5 ? Some(x + 1) : None;\nlet x: option(int) = Some(14) |?> maybeInc;\nlet y: option(int) = None |?> maybeInc;", "rendered": "<pre><code>open Json.Infix;\nlet maybeInc = x => x > 5 ? Some(x + 1) : None;\nlet x: option(int) = Some(14) |?> maybeInc;\nlet y: option(int) = None |?> maybeInc;</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|?>", "title": "Infix.|?>", "contents": "The &quot;transform contents into new optional&quot; operator", "rendered": "The &quot;transform contents into new optional&quot; operator", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|?>", "title": "Infix.|?>", "contents": "|?> option option  option  ", "rendered": "<h4 class='item'>let |?> = (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix;\nlet x: int = Some(10) |? 4;\nlet y: int = None |? 5;\nJs.log2(x, y);", "rendered": "<pre><code>open Json.Infix;\nlet x: int = Some(10) |? 4;\nlet y: int = None |? 5;\nJs.log2(x, y);</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|?", "title": "Infix.|?", "contents": "The &quot;upwrap with default&quot; operator", "rendered": "The &quot;upwrap with default&quot; operator", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|?", "title": "Infix.|?", "contents": "|? option  ", "rendered": "<h4 class='item'>let |? = (option('a), 'a) => 'a</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix;\nlet x: int = None |! \"This will throw\";", "rendered": "<pre><code>open Json.Infix;\nlet x: int = None |! \"This will throw\";</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|!", "title": "Infix.|!", "contents": "But you gotta be sure, otherwise it will throw.", "rendered": "But you gotta be sure, otherwise it will throw.", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix;\nlet x: int = Some(10) |! \"Expected this to be present\";\nJs.log(x);", "rendered": "<pre><code>open Json.Infix;\nlet x: int = Some(10) |! \"Expected this to be present\";\nJs.log(x);</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|!", "title": "Infix.|!", "contents": "If you&#39;re sure there&#39;s a value, you can force it.", "rendered": "If you&#39;re sure there&#39;s a value, you can force it.", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|!", "title": "Infix.|!", "contents": "The &quot;force unwrap&quot; operator", "rendered": "The &quot;force unwrap&quot; operator", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-Infix.|!", "title": "Infix.|!", "contents": "|! option string  ", "rendered": "<h4 class='item'>let |! = (option('a), string) => 'a</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Json"},
{"href": "./api/Json.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Json"},
{"href": "./api/Json.html#type-t", "title": "t", "contents": "t string float list t list string t", "rendered": "<h4 class='item'>type t = \n    | String(string)\n    | Number(float)\n    | Array(list(<a href=\"./api/Json.html#type-t\">t</a>))\n    | Object(list((string, <a href=\"./api/Json.html#type-t\">t</a>)))\n    | True\n    | False\n    | Null\n</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-null", "title": "null", "contents": "null t option unit ", "rendered": "<h4 class='item'>let null = <a href=\"./api/Json.html#type-t\">t</a> => option(unit)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-bool", "title": "bool", "contents": "bool t option bool ", "rendered": "<h4 class='item'>let bool = <a href=\"./api/Json.html#type-t\">t</a> => option(bool)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-obj", "title": "obj", "contents": "obj t option list string t ", "rendered": "<h4 class='item'>let obj = <a href=\"./api/Json.html#type-t\">t</a> => option(list((string, <a href=\"./api/Json.html#type-t\">t</a>)))</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-array", "title": "array", "contents": "array t option list t ", "rendered": "<h4 class='item'>let array = <a href=\"./api/Json.html#type-t\">t</a> => option(list(<a href=\"./api/Json.html#type-t\">t</a>))</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-number", "title": "number", "contents": "number t option float ", "rendered": "<h4 class='item'>let number = <a href=\"./api/Json.html#type-t\">t</a> => option(float)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-string", "title": "string", "contents": "string t option string ", "rendered": "<h4 class='item'>let string = <a href=\"./api/Json.html#type-t\">t</a> => option(string)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix;\nlet json = Json.parse({|{\"a\": {\"b\": {\"c\": 2}}}|});\nlet num = Json.getPath(\"a.b.c\", json) |?> Json.number;\nassert(num == Some(2.))", "rendered": "<pre><code>open Json.Infix;\nlet json = Json.parse({|{\"a\": {\"b\": {\"c\": 2}}}|});\nlet num = Json.getPath(\"a.b.c\", json) |?> Json.number;\nassert(num == Some(2.))</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-getPath", "title": "getPath", "contents": "Get a deeply nested value from an object t.", "rendered": "Get a deeply nested value from an object <code>t</code>.", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-getPath", "title": "getPath", "contents": "getPath string t option t  ", "rendered": "<h4 class='item'>let getPath = (string, <a href=\"./api/Json.html#type-t\">t</a>) => option(<a href=\"./api/Json.html#type-t\">t</a>)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-nth", "title": "nth", "contents": " If t is an array, get the value associated with the given index ", "rendered": " If <code>t</code> is an array, get the value associated with the given index ", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-nth", "title": "nth", "contents": "nth int t option t  ", "rendered": "<h4 class='item'>let nth = (int, <a href=\"./api/Json.html#type-t\">t</a>) => option(<a href=\"./api/Json.html#type-t\">t</a>)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-get", "title": "get", "contents": " If t is an object, get the value associated with the given string key ", "rendered": " If <code>t</code> is an object, get the value associated with the given string key ", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-get", "title": "get", "contents": "get string t option t  ", "rendered": "<h4 class='item'>let get = (string, <a href=\"./api/Json.html#type-t\">t</a>) => option(<a href=\"./api/Json.html#type-t\">t</a>)</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "let text = {|{\"hello\": \"folks\", \"aa\": [2, 3, \"four\"]}|};\nlet result = Json.stringify(Json.parse(text));\nJs.log(result);\nassert(text == result);", "rendered": "<pre><code>let text = {|{\"hello\": \"folks\", \"aa\": [2, 3, \"four\"]}|};\nlet result = Json.stringify(Json.parse(text));\nJs.log(result);\nassert(text == result);</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-stringify", "title": "stringify", "contents": "stringify t string ", "rendered": "<h4 class='item'>let stringify = <a href=\"./api/Json.html#type-t\">t</a> => string</h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-parse", "title": "parse", "contents": " Turns some text into a json object. throws on failure ", "rendered": " Turns some text into a json object. throws on failure ", "breadcrumb": "Json"},
{"href": "./api/Json.html#value-parse", "title": "parse", "contents": "parse string t ", "rendered": "<h4 class='item'>let parse = string => <a href=\"./api/Json.html#type-t\">t</a></h4>", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "Json", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Json"},
{"href": "./api/Json.html#Infix-operators-for-easier-working", "title": "Infix operators for easier working", "contents": "", "rendered": "", "breadcrumb": "Json"},
{"href": "./api/Json.html#The-JSON-type", "title": "The JSON type", "contents": "", "rendered": "", "breadcrumb": "Json"},
{"href": "./api/Json.html#Coercing-to-types", "title": "Coercing to types", "contents": "", "rendered": "", "breadcrumb": "Json"},
{"href": "./api/Json.html#Accessing-descendents", "title": "Accessing descendents", "contents": "", "rendered": "", "breadcrumb": "Json"},
{"href": "./api/Json.html#Parse--amp--stringify", "title": "Parse &amp; stringify", "contents": "", "rendered": "", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "code block", "contents": "open Json.Infix; /* for the nice infix operators */\nlet raw = {|{\"hello\": \"folks\"}|};\nlet who = Json.parse(raw) |> Json.get(\"hello\") |?> Json.string;\nJs.log(who);", "rendered": "<pre><code>open Json.Infix; /* for the nice infix operators */\nlet raw = {|{\"hello\": \"folks\"}|};\nlet who = Json.parse(raw) |> Json.get(\"hello\") |?> Json.string;\nJs.log(who);</code></pre>", "breadcrumb": "Json"},
{"href": "./api/Json.html#Basics", "title": "Basics", "contents": "", "rendered": "", "breadcrumb": "Json"},
{"href": "./api/Json.html", "title": "Json", "contents": "Works with bucklescript and bsb-native", "rendered": "Works with bucklescript and bsb-native", "breadcrumb": "Json"},
{"href": "./api/Json.html#Json-parser", "title": "Json parser", "contents": "", "rendered": "", "breadcrumb": "Json"}]